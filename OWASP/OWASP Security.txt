Top 10 Web Application Security Risks
There are three new categories, four categories with naming and scoping changes, and some consolidation in the Top 10 for 2021.

Mapping

A01:2021-Broken Access Control moves up from the fifth position; 94% of applications were tested for some form of broken access control. The 34 Common Weakness Enumerations (CWEs) mapped to Broken Access Control had more occurrences in applications than any other category.
A02:2021-Cryptographic Failures shifts up one position to #2, previously known as Sensitive Data Exposure, which was broad symptom rather than a root cause. The renewed focus here is on failures related to cryptography which often leads to sensitive data exposure or system compromise.
A03:2021-Injection slides down to the third position. 94% of the applications were tested for some form of injection, and the 33 CWEs mapped into this category have the second most occurrences in applications. Cross-site Scripting is now part of this category in this edition.
A04:2021-Insecure Design is a new category for 2021, with a focus on risks related to design flaws. If we genuinely want to “move left” as an industry, it calls for more use of threat modeling, secure design patterns and principles, and reference architectures.
A05:2021-Security Misconfiguration moves up from #6 in the previous edition; 90% of applications were tested for some form of misconfiguration. With more shifts into highly configurable software, it’s not surprising to see this category move up. The former category for XML External Entities (XXE) is now part of this category.
A06:2021-Vulnerable and Outdated Components was previously titled Using Components with Known Vulnerabilities and is #2 in the Top 10 community survey, but also had enough data to make the Top 10 via data analysis. This category moves up from #9 in 2017 and is a known issue that we struggle to test and assess risk. It is the only category not to have any Common Vulnerability and Exposures (CVEs) mapped to the included CWEs, so a default exploit and impact weights of 5.0 are factored into their scores.
A07:2021-Identification and Authentication Failures was previously Broken Authentication and is sliding down from the second position, and now includes CWEs that are more related to identification failures. This category is still an integral part of the Top 10, but the increased availability of standardized frameworks seems to be helping.
A08:2021-Software and Data Integrity Failures is a new category for 2021, focusing on making assumptions related to software updates, critical data, and CI/CD pipelines without verifying integrity. One of the highest weighted impacts from Common Vulnerability and Exposures/Common Vulnerability Scoring System (CVE/CVSS) data mapped to the 10 CWEs in this category. Insecure Deserialization from 2017 is now a part of this larger category.
A09:2021-Security Logging and Monitoring Failures was previously Insufficient Logging & Monitoring and is added from the industry survey (#3), moving up from #10 previously. This category is expanded to include more types of failures, is challenging to test for, and isn’t well represented in the CVE/CVSS data. However, failures in this category can directly impact visibility, incident alerting, and forensics.
A10:2021-Server-Side Request Forgery is added from the Top 10 community survey (#1). The data shows a relatively low incidence rate with above average testing coverage, along with above-average ratings for Exploit and Impact potential. This category represents the scenario where the security community members are telling us this is important, even though it’s not illustrated in the data at this time.

- Broken Access Control
	- developers underestimate the difficulty of implementing a reliable access control mechanism. Many were not deliberately designed, just evolved
	- access control rules becomes so unwieldy that it is almost impossible to understand
	- flaws access control schemes can be easy to discover and exploit
	- often, all that is required is to craft a request for functions or content that should not be granted
	- people can view unauthorized content, attacker might be able to change or delete content, or perform unauthorized functions, take over site administration
	- sites that allow administration online are prime targets by both outsiders and insiders
	- Environments Affected
		- web servers, application servers, and web application environments are susceptible to at least some of these issues
		- Examples and References - https://owasp.org/www-community/Broken_Access_Control

- Cryptographic Failures
	- Previously known as 'Sensitive Data Exposure', the focus is on failures related to cryptography
		- Hard-coded Password
		- Broken or Risky Crypto Algorithm
		- Insufficient Entropy
	- The first thing is to determine the protection needs of data in transit and at rest
		- Password, credit card numbers, health records, personal information, and business secrets require extra protection
		- Data that falls under privacy laws
		- Is any data transmitted in clear text?
		- Old or weak cryptographic algorithms or protocols used either by default or in older code?
		- Are default crypto keys in use, weak crypto keys generated or re-used, or is proper key management or rotation missing? Are crypto keys checked into source code repositories?
		- Is encryption not enforced?
		- Is the received server certificate and trust chain properly validated?
		- Are initialization vectors ignored, reused, or not generated sufficiently secure for the crytographic mode of operation? Is an insecure mode of operation such as ECP in use? Encryption when authenticated encryption more appropriate?
		- Are passwords being used as cryptographic keys in absence of a password base key derivation function?
		- Is randomness used for cryptographic purposes that was not designed to meet cryptographic requirements? Has the developer over-written the strong seeding functionality built into it with a seed that lacks sufficient entropy/unpredictability?
		- Are deprecated hash functions such as MD5 or SHA1 in use, or are non-cryptographic hash functions used when cryptogrpahic hash functions are needed?
		- Are cryptographic error messages or side channel information exploitable? For example in form of padding oracle attacks?
	How to Prevent
		- Do the following, at a minimum, and consult the references:
		- Classify data processed, stored, or transmitted by an application. Identify which data is sensitive according to privacy laws, regulatory requirements, or business needs.
		- Don't store sensitive data unnecessarily. Discard it as soon as possible or use PCI DSS compliant tokenization or even truncation. Data that is not retained cannot be stolen.
		- Make sure to encrypt all sensitive data at rest.
		- Ensure up-to-date and strong standard algorithms, protocols, and keys are in place; use proper key management.
		- Encrypt all data in transit with secure protocols such as TLS with forward secrecy (FS) ciphers, cipher prioritization by the server, and secure parameters. Enforce encryption using directives like HTTP Strict Transport Security (HSTS).
		- Disable caching for response that contain sensitive data.
		- Apply required security controls as per the data classification.
		- Do not use legacy protocols such as FTP and SMTP for transporting sensitive data.
		- Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.
		- Initialization vectors must be chosen appropriate for the mode of operation. For many modes, this means using a CSPRNG (cryptographically secure pseudo random number generator). For modes that require a nonce, then the initialization vector (IV) does not need a CSPRNG. In all cases, the IV should never be used twice for a fixed key.
		- Always use authenticated encryption instead of just encryption.
		- Keys should be generated cryptographically randomly and stored in memory as byte arrays. If a password is used, then it must be converted to a key via an appropriate password base key derivation function.
		- Ensure that cryptographic randomness is used where appropriate, and that it has not been seeded in a predictable way or with low entropy. Most modern APIs do not require the developer to seed the CSPRNG to get security.
		- Avoid deprecated cryptographic functions and padding schemes, such as MD5, SHA1, PKCS number 1 v1.5 .
		- Verify independently the effectiveness of configuration and settings
		
- Injection
	-
	
To Do
*****
- Read up on Java and cryptography